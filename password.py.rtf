{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23100\viewh11080\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import random\
import string\
import pyperclip\
class User:\
    """\
    Create User class that generates new instances of a user.\
\
    """\
    user_list = []\
\
    def __init__(self, username, password):\
        """\
        method that defines the properties of a user.\
        """\
        self.username = username\
        self.password = password\
\
    def save_user(self):\
        """\
        A method that saves a new user instace into the user list\
        """\
        User.user_list.append(self)\
    \
\
    @classmethod\
    def display_user(cls):\
        return cls.user_list\
\
    def delete_user(self):\
        '''\
        delete_account method deletes a  saved account from the list\
        '''\
        User.user_list.remove(self)\
\
class Credentials():\
    """\
    Create credentials class to help create new objects of credentials\
    """\
    credentials_list = []\
    @classmethod\
    def verify_user(cls,username, password):\
        """\
        method to verify whether the user is in our user_list or not\
        """\
        a_user = ""\
        for user in User.user_list:\
            if(user.username == username and user.password == password):\
                    a_user == user.username\
        return a_user\
\
    def __init__(self,account,userName, password):\
        """\
        method that defines user credentials to be stored\
        """\
        self.account = account\
        self.userName = userName\
        self.password = password\
    \
    def save_details(self):\
        """\
        method to store a new credential to the credentials list\
        """\
        Credentials.credentials_list.append(self)\
\
    def delete_credentials(self):\
        """\
        delete_credentials method that deletes an account credentials from the credentials_list\
        """\
        Credentials.credentials_list.remove(self)\
    \
    @classmethod\
    def find_credential(cls, account):\
        """\
        Method that takes in a account_name and returns a credential that matches that account_name.\
\
        """\
        for credential in cls.credentials_list:\
            if credential.account == account:\
                return credential\
    @classmethod\
    def copy_password(cls,account):\
        found_credentials = Credentials.find_credential(account)\
        pyperclip.copy(found_credentials.password)\
\
    @classmethod\
    def if_credential_exist(cls, account):\
        """\
        Method that checks if a credential exists from the credential list and returns true or false depending if the credential exists.\
        """\
        for credential in cls.credentials_list:\
            if credential.account == account:\
                return True\
        return False\
    @classmethod\
    def display_credentials(cls):\
        """\
        Method that returns all items in the credentials list\
\
        """\
        return cls.credentials_list\
\
    def generatePassword(stringLength=8):\
        """Generate a random password string of letters and digits and special characters"""\
        password = string.ascii_uppercase + string.ascii_lowercase + string.digits + "~!@#$%^&*"\
        return ''.join(random.choice(password) for i in range(stringLength))}